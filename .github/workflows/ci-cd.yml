name: ci-cd

on:
  # Trigger the workflow on push or pull request to main
  push:
    branches:
      - '**'
    tags-ignore:
      - '*.*'
  pull_request:
    branches:
      - '**'
      
jobs:
  ci:
    # Set up operating system
    runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         python-version: [3.9]
    
    steps:
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Checkout repository
      uses: actions/checkout@v2
  
    - name: Install Poetry
      uses: snok/install-poetry@v1
    
    - name: Install package
      run: poetry install
   
    - name: Test with pytest
      run: poetry run pytest tests/ --cov=simplefit --cov-report=xml
      
    - name: Upload coverage to Codecov  
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml    # coverage report
        fail_ci_if_error: true

        # Step 8. Build documentation
    - name: Build documentation
      run: poetry run make html --directory docs/
      
      
      
      
  cd:
    # Only run this job if the "ci" job passes
    needs: ci
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    # Step 1. Set up operating system
    runs-on: ubuntu-latest
    steps:

    # Step 2. Set up Python 3.9
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    # Step 3. Check-out repository so we can access its contents
    - uses: actions/checkout@v2
      with:
        ref: main
        token : ${{ secrets.ACCESS_TOKEN }}
    

    # Step 4. Install poetry
    - uses: snok/install-poetry@v1

    # Step 5. Install our package
    - name: Install package
      run: poetry install     

    
    # Step 6. Turn off branch protection
    - name: Disable admin branch protection
      uses: benjefferies/branch-protection-bot@master
      if: always()
      with:
          access_token: ${{ secrets.ACCESS_TOKEN }}
          branch: main
          enforce_admins: false
    
    # Step 7. Bump version and tagging
    - name: Bump version and tagging and publish
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git pull origin main
        poetry run semantic-release version
        poetry version
        git commit --amend -m "[skip actions] Bump new version"
        git push --tag
        
    - name: Push package version changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.ACCESS_TOKEN }}

   
    # Step 8. Turn on branch protection
    - name: Enable admin branch protection
      uses: benjefferies/branch-protection-bot@master
      if: always()  # Force to always run this step to ensure "include administrators" is always turned back on
      with:
        access_token: ${{ secrets.ACCESS_TOKEN }}
        branch: main
        enforce_admins: true
    

    # Step 9. Build package    
    - name: Build package and publish to test PyPI
      run: |
        poetry build       
        
    # Step 10. Publish to TestPyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
        
    # Step 11. Test install from TestPyPI
    - name: Test install from TestPyPI
      run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple \
          covizpy
          
    # Step 12. Publish to PyPI
    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true
